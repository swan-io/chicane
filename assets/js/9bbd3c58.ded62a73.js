"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[125],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,h=m["".concat(p,".").concat(d)]||m[d]||c[d]||s;return n?r.createElement(h,o(o({ref:t},l),{},{components:n})):r.createElement(h,o({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var u=2;u<s;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},862:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const s={title:"The Route pattern syntax",sidebar_label:"Route pattern syntax"},o=void 0,i={unversionedId:"route-pattern-syntax",id:"route-pattern-syntax",title:"The Route pattern syntax",description:"When defining a route, you assign a URL pattern to it. Its syntax supports different features:",source:"@site/docs/route-pattern-syntax.md",sourceDirName:".",slug:"/route-pattern-syntax",permalink:"/chicane/route-pattern-syntax",draft:!1,editUrl:"https://github.com/swan-io/chicane/edit/main/docs/docs/route-pattern-syntax.md",tags:[],version:"current",frontMatter:{title:"The Route pattern syntax",sidebar_label:"Route pattern syntax"},sidebar:"docs",previous:{title:"Creating your router",permalink:"/chicane/creating-your-router"},next:{title:"Matching some routes",permalink:"/chicane/matching-some-routes"}},p={},u=[{value:"Simple path",id:"simple-path",level:2},{value:"Path params",id:"path-params",level:2},{value:"Wildcard",id:"wildcard",level:2},{value:"Query params",id:"query-params",level:2}],l={toc:u};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When defining a route, you assign a ",(0,a.kt)("strong",{parentName:"p"},"URL pattern")," to it. Its syntax supports different features:"),(0,a.kt)("h2",{id:"simple-path"},"Simple path"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{2,3}","{2,3}":!0},'const Router = createRouter({\n  Home: "/",\n  UserList: "/users",\n});\n')),(0,a.kt)("h2",{id:"path-params"},"Path params"),(0,a.kt)("p",null,"You can have ",(0,a.kt)("strong",{parentName:"p"},"params")," (or ",(0,a.kt)("em",{parentName:"p"},"dynamic segments"),") in your paths. It's syntax is ",(0,a.kt)("inlineCode",{parentName:"p"},":yourParamName"),". A param in the path will result in a ",(0,a.kt)("strong",{parentName:"p"},"non-nullable ",(0,a.kt)("inlineCode",{parentName:"strong"},"string"))," in the route param object when matched."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{4}","{4}":!0},'const Router = createRouter({\n  Home: "/",\n  UserList: "/users",\n  UserDetail: "/users/:userId",\n});\n')),(0,a.kt)("h2",{id:"wildcard"},"Wildcard"),(0,a.kt)("p",null,"When building your React app, there's a fair chance you'll want to delegate to a component the management of its ",(0,a.kt)("strong",{parentName:"p"},"subroutes"),", for this purpose, you might want to use ",(0,a.kt)("strong",{parentName:"p"},"wildcards")," to make your component listen to every route that starts with a given path, and then let it handle the fine routing."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{3}","{3}":!0},'const Router = createRouter({\n  Home: "/",\n  UserArea: "/users/*", // will match "/users" and "/users/:userId"\n  UserList: "/users",\n  UserDetail: "/users/:userId",\n});\n')),(0,a.kt)("p",null,"This unlocks the possibility to delegate subroutes. Here, ",(0,a.kt)("inlineCode",{parentName:"p"},"App")," doesn't have to know about what happens in ",(0,a.kt)("inlineCode",{parentName:"p"},"UserArea"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'const App = () => {\n  const route = Router.useRoute(["Home", "UserArea"]);\n\n  return match(route)\n    .with({ name: "Home" }, () => <Home />)\n    .with({ name: "UserArea" }, () => <UserArea />)\n    .otherwise(() => null);\n};\n')),(0,a.kt)("p",null,"But here, the component can manage its subroutes, keeping your diffs where it actually matters."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/UserArea.tsx"',title:'"src/UserArea.tsx"'},'const UserArea = () => {\n  const route = Router.useRoute(["UserList", "UserDetail"]);\n\n  return match(route)\n    .with({ name: "UserList" }, () => <UserList />)\n    .with({ name: "UserDetail" }, ({ params: { userId } }) => (\n      <UserDetail userId={userId} />\n    ))\n    .otherwise(() => null);\n};\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Because it's not tied to a precise URL but rather a acts like a scope, ",(0,a.kt)("strong",{parentName:"p"},"you cannot create a link that points to a wildcard route")," (e.g. in the previous example, you can link to ",(0,a.kt)("inlineCode",{parentName:"p"},"UserList"),", but not to ",(0,a.kt)("inlineCode",{parentName:"p"},"UserArea"),").")),(0,a.kt)("h2",{id:"query-params"},"Query params"),(0,a.kt)("p",null,"If your route can take meaninful ",(0,a.kt)("strong",{parentName:"p"},"query params"),", you can specify them in the pattern using the ",(0,a.kt)("inlineCode",{parentName:"p"},":paramName")," syntax after a ",(0,a.kt)("inlineCode",{parentName:"p"},"?")," character."),(0,a.kt)("p",null,"When having multiple query params, separate them with a ",(0,a.kt)("inlineCode",{parentName:"p"},"&"),", just like in an actual query string!"),(0,a.kt)("p",null,"In the following example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"UserList")," route will receive a ",(0,a.kt)("strong",{parentName:"p"},"nullable ",(0,a.kt)("inlineCode",{parentName:"strong"},"sortBy")," string")," in its ",(0,a.kt)("inlineCode",{parentName:"p"},"params")," object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{4}","{4}":!0},'const Router = createRouter({\n  Home: "/",\n  UserArea: "/users/*",\n  UserList: "/users?:sortBy",\n  UserDetail: "/users/:userId",\n});\n')),(0,a.kt)("p",null,"If you expect an array (which could be useful for filters, e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"/users?status=Active&status=Inactive"),"), you can suffix the param with ",(0,a.kt)("inlineCode",{parentName:"p"},"[]")," to indicate to Chicane that it needs to treat this parameter as an array. The following will result in a ",(0,a.kt)("strong",{parentName:"p"},"nullable ",(0,a.kt)("inlineCode",{parentName:"strong"},"status")," ",(0,a.kt)("inlineCode",{parentName:"strong"},"string[]"))," in its ",(0,a.kt)("inlineCode",{parentName:"p"},"params")," object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{4}","{4}":!0},'const Router = createRouter({\n  Home: "/",\n  UserArea: "/users/*",\n  UserList: "/users?:sortBy&:status[]",\n  UserDetail: "/users/:userId",\n});\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"You can also do the same for the hash of the URL. Same syntax, just add it after a ",(0,a.kt)("inlineCode",{parentName:"p"},"#")," character. (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"/users/:userId#:profile"),")")))}c.isMDXComponent=!0}}]);