"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{5787:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var s=n(4848),r=n(8453);const a={title:"The Route pattern syntax",sidebar_label:"Route pattern syntax"},i=void 0,o={id:"route-pattern-syntax",title:"The Route pattern syntax",description:"When defining a route, you assign a URL pattern to it. Its syntax supports different features:",source:"@site/docs/route-pattern-syntax.md",sourceDirName:".",slug:"/route-pattern-syntax",permalink:"/chicane/route-pattern-syntax",draft:!1,unlisted:!1,editUrl:"https://github.com/swan-io/chicane/edit/main/docs/docs/route-pattern-syntax.md",tags:[],version:"current",frontMatter:{title:"The Route pattern syntax",sidebar_label:"Route pattern syntax"},sidebar:"docs",previous:{title:"Creating your router",permalink:"/chicane/creating-your-router"},next:{title:"Matching some routes",permalink:"/chicane/matching-some-routes"}},c={},l=[{value:"Simple path",id:"simple-path",level:2},{value:"Path params",id:"path-params",level:2},{value:"Query params",id:"query-params",level:2},{value:"Union params",id:"union-params",level:2},{value:"Wildcard",id:"wildcard",level:2}];function u(e){const t={admonition:"admonition",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["When defining a route, you assign a ",(0,s.jsx)(t.strong,{children:"URL pattern"})," to it. Its syntax supports different features:"]}),"\n",(0,s.jsx)(t.h2,{id:"simple-path",children:"Simple path"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"{2,3}",children:'const Router = createRouter({\n  Home: "/",\n  UserList: "/users",\n});\n'})}),"\n",(0,s.jsx)(t.h2,{id:"path-params",children:"Path params"}),"\n",(0,s.jsxs)(t.p,{children:["You can have ",(0,s.jsx)(t.strong,{children:"params"})," (or ",(0,s.jsx)(t.em,{children:"dynamic segments"}),") in your paths. It's syntax is ",(0,s.jsx)(t.code,{children:":yourParamName"}),". A param in the path will result in a ",(0,s.jsxs)(t.strong,{children:["non-nullable ",(0,s.jsx)(t.code,{children:"string"})]})," in the route param object when matched."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"{4}",children:'const Router = createRouter({\n  Home: "/",\n  UserList: "/users",\n  UserDetail: "/users/:userId",\n});\n'})}),"\n",(0,s.jsx)(t.h2,{id:"query-params",children:"Query params"}),"\n",(0,s.jsxs)(t.p,{children:["If your route can take meaninful ",(0,s.jsx)(t.strong,{children:"query params"}),", you can specify them in the pattern using the ",(0,s.jsx)(t.code,{children:":paramName"})," syntax after a ",(0,s.jsx)(t.code,{children:"?"})," character. When having multiple query params, separate them with a ",(0,s.jsx)(t.code,{children:"&"}),", just like in an actual query string!"]}),"\n",(0,s.jsxs)(t.p,{children:["In the following example, the ",(0,s.jsx)(t.code,{children:"UserList"})," route will receive a ",(0,s.jsxs)(t.strong,{children:["nullable ",(0,s.jsx)(t.code,{children:"sortBy"})," string"]})," in its ",(0,s.jsx)(t.code,{children:"params"})," object."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"{4}",children:'const Router = createRouter({\n  Home: "/",\n  UserArea: "/users/*",\n  UserList: "/users?:sortBy",\n  UserDetail: "/users/:userId",\n});\n'})}),"\n",(0,s.jsxs)(t.p,{children:["If you expect an array (which could be useful for filters, e.g. ",(0,s.jsx)(t.code,{children:"/users?status=Active&status=Inactive"}),"), you can suffix the param with ",(0,s.jsx)(t.code,{children:"[]"})," to indicate to Chicane that it needs to treat this parameter as an array. The following will result in a ",(0,s.jsxs)(t.strong,{children:["nullable ",(0,s.jsx)(t.code,{children:"status"})," ",(0,s.jsx)(t.code,{children:"string[]"})]})," in its ",(0,s.jsx)(t.code,{children:"params"})," object."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"{4}",children:'const Router = createRouter({\n  Home: "/",\n  UserArea: "/users/*",\n  UserList: "/users?:sortBy&:status[]",\n  UserDetail: "/users/:userId",\n});\n'})}),"\n",(0,s.jsx)(t.h2,{id:"union-params",children:"Union params"}),"\n",(0,s.jsxs)(t.p,{children:["At some point you might need to restraint a param type (as ",(0,s.jsx)(t.code,{children:"string"})," is too wide). To achieve this, you can declare union params using the ",(0,s.jsx)(t.code,{children:":name{a|b|\u2026}"})," syntax."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"{3,4}",children:'const Router = createRouter({\n  Home: "/",\n  Projects: "/:env{live|sandbox}/projects",\n  Users: "/users?:statuses{invited|enabled|banned}[]",\n});\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="src/App.tsx"',children:'const App = () => {\n  const route = Router.useRoute(["Projects", "Users"]);\n\n  return match(route)\n    .with({ name: "Projects" }, ({ params: { env } }) => (\n      // env type is "live" | "sandbox"\n      <Projects env={env} />\n    ))\n    .with({ name: "Users" }, ({ params: { statuses } }) => (\n      // statuses type is Array<"invited" | "enabled" | "banned"> | undefined\n      <Users statuses={statuses} />\n    ))\n    .otherwise(() => null);\n};\n'})}),"\n",(0,s.jsx)(t.h2,{id:"wildcard",children:"Wildcard"}),"\n",(0,s.jsxs)(t.p,{children:["When building your React app, there's a fair chance you'll want to delegate to a component the management of its ",(0,s.jsx)(t.strong,{children:"subroutes"}),", for this purpose, you might want to use ",(0,s.jsx)(t.strong,{children:"wildcards"})," to make your component listen to every route that starts with a given path, and then let it handle the fine routing."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"{3}",children:'const Router = createRouter({\n  Home: "/",\n  UserArea: "/users/*", // will match "/users" and "/users/:userId"\n  UserList: "/users",\n  UserDetail: "/users/:userId",\n});\n'})}),"\n",(0,s.jsxs)(t.p,{children:["This unlocks the possibility to delegate subroutes. Here, ",(0,s.jsx)(t.code,{children:"App"})," doesn't have to know about what happens in ",(0,s.jsx)(t.code,{children:"UserArea"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="src/App.tsx"',children:'const App = () => {\n  const route = Router.useRoute(["Home", "UserArea"]);\n\n  return match(route)\n    .with({ name: "Home" }, () => <Home />)\n    .with({ name: "UserArea" }, () => <UserArea />)\n    .otherwise(() => null);\n};\n'})}),"\n",(0,s.jsx)(t.p,{children:"But here, the component can manage its subroutes, keeping your diffs where it actually matters."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="src/UserArea.tsx"',children:'const UserArea = () => {\n  const route = Router.useRoute(["UserList", "UserDetail"]);\n\n  return match(route)\n    .with({ name: "UserList" }, () => <UserList />)\n    .with({ name: "UserDetail" }, ({ params: { userId } }) => (\n      <UserDetail userId={userId} />\n    ))\n    .otherwise(() => null);\n};\n'})}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["Because it's not tied to a precise URL but rather a acts like a scope, ",(0,s.jsx)(t.strong,{children:"you cannot create a link that points to a wildcard route"})," (e.g. in the previous example, you can link to ",(0,s.jsx)(t.code,{children:"UserList"}),", but not to ",(0,s.jsx)(t.code,{children:"UserArea"}),")."]})})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(6540);const r={},a=s.createContext(r);function i(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);